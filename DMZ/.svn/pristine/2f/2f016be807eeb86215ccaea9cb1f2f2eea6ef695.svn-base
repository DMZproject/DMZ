package DMZ.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Hashtable;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.JTextComponent;

import weka.core.Attribute;
import weka.core.Instances;
import weka.filters.Filter;
import weka.gui.PropertyDialog;
import weka.gui.ResultHistoryPanel;
import weka.gui.explorer.AssociationsPanel;
import weka.gui.explorer.ClassifierPanel;
import weka.gui.explorer.ClustererPanel;
import weka.gui.explorer.PreprocessPanel;
import weka.gui.visualize.PlotData2D;
import weka.gui.visualize.VisualizePanel2;

public class RightPanel extends JPanel {

	JPanel openFilePanel;
	JPanel instSummaryPanel;
	JPanel histogramPanel;

	PropertyDialog pd;
	RightTabbedPane tp;
	int AssociationLabelCount = 0;
	int ClusterLabelCount = 0;
	int ClassifyLabelCount = 0;

	AssociationsPanel sp;
	ClustererPanel cp;
	ClassifierPanel fp;

	int spListSize = 0;
	int cpListSize = 0;
	int fpListSize = 0;
	public int associationCheck = 0;
	public int clusterCheck = 0;
	public int classifyCheck = 0;
	public int filterCheck = 0;
	PreprocessPanel pp;
	JPanel jjp = new JPanel();

	RightPanel() {
		pp = new PreprocessPanel();

	}

	void addOpenFilePanel(ParentLabel la) {

		removeAll();

		openFilePanel = la.getInputData().getOpenFilePanel();
		instSummaryPanel = la.getInputData().getInstancesSummaryPanel();
		la.getInputData().setLabel(la);

		openFilePanel.setVisible(true);
		instSummaryPanel.setVisible(true);

		setLayout(null);

		openFilePanel.setBackground(Color.white);
		instSummaryPanel.setBackground(Color.WHITE);
		add(openFilePanel);
		add(instSummaryPanel);

		validate();
		repaint();

	}

	void addHistogramPanel(ParentLabel histogramLabel) {
		removeAll();

		histogramPanel = histogramLabel.getInputData().getHistogram()
				.getHistogramPanel();
		histogramPanel.setVisible(true);

		setLayout(new BorderLayout());

		add(histogramPanel);

		validate();
		repaint();

	}

	void addScatterPlot(ParentLabel la) {
		int[] m_selectedAttribs;
		Instances m_data = null;
		JList m_attribList = new JList();
		String[] tempAttribNames;

		int extpad = 3;
		int cellSize = 3;
		int m_classIndex;
		JComboBox m_classAttrib = new JComboBox();

		String type;
		m_data = la.getInputData().getInstances();
		tempAttribNames = new String[m_data.numAttributes()];

		removeAll();
		m_classAttrib.removeAllItems();
		for (int i = 0; i < tempAttribNames.length; i++) {
			type = " (" + Attribute.typeToStringShort(m_data.attribute(i))
					+ ")";
			tempAttribNames[i] = new String("Colour: "
					+ m_data.attribute(i).name() + " " + type);
			m_classAttrib.addItem(tempAttribNames[i]);
		}
		if (m_data.classIndex() == -1) {
			m_classAttrib.setSelectedIndex(tempAttribNames.length - 1);
		} else {
			m_classAttrib.setSelectedIndex(m_data.classIndex());
		}
		m_attribList.setListData(tempAttribNames);
		m_attribList.setSelectionInterval(0, tempAttribNames.length - 1);
		m_classAttrib.setSelectedIndex(tempAttribNames.length - 1);
		m_classIndex = m_classAttrib.getSelectedIndex();
		m_selectedAttribs = m_attribList.getSelectedIndices();

		VisualizePanel2 vp = new VisualizePanel2();

		try {
			PlotData2D pd = new PlotData2D(m_data);
			pd.setPlotName("Master Plot");
			vp.setMasterPlot(pd);
			// System.out.println("x: "+i+" y: "+j);
			vp.setXIndex(m_selectedAttribs[0]);
			vp.setYIndex(m_selectedAttribs[0]);
			vp.m_ColourCombo.setSelectedIndex(m_classIndex);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		vp.setSize(440, 600);
		vp.setVisible(true);
		setLayout(new BorderLayout());
		this.add(vp, BorderLayout.CENTER);
		validate();
		repaint();
	}

	void addAssociationPanel(AssociationLabel la) {
		sp = la.getSp();
		try {
			System.out.println(la.getInputData().getFilePath() + "@@");
			clusterCheck = 0;
			associationCheck = 1;
			classifyCheck = 0;
			if (la.getId() == -1)
				la.setId(AssociationLabelCount++);

			int x = 0;
			int y = 0;
			removeAll();
			pd = new PropertyDialog();

			weka.gui.LogPanel lp = new weka.gui.LogPanel();

			// jf.getContentPane().add(lp, BorderLayout.SOUTH);

			sp.setRightPanel(this);
			sp.getAssociatorEditor().setRightPanel(this);
			sp.setInstances(la.getInputData().getInstances());

			if (((AssociationLabel) la).getAlgorithm() == "Apriori")
				sp.getAssociatorEditor().setApriori();
			else if (((AssociationLabel) la).getAlgorithm() == "FPGrowth")
				sp.getAssociatorEditor().setFPGrowth();

			JPanel jp = pd.initialize1(sp.getAssociatorEditor(), x, y);

			// this.add(jp,BorderLayout.CENTER);
			tp = new RightTabbedPane(this, jp, sp, "Algorithm");
			validate();
			repaint();

			// this.add(sp,BorderLayout.CENTER); //ouput패널
			// this.add(lp,BorderLayout.SOUTH); //log 패널
			// sp.startAssociator();

		} catch (Exception ex) {
			ex.printStackTrace();
			System.err.println(ex.getMessage());
		}
	}

	/*
	 * public void AssociationEdit(){ removeAll(); JPanel
	 * jp=pd.initialize(sp.getAssociatorEditor(), 0, 0); setLayout(new
	 * BorderLayout()); add(jp,BorderLayout.CENTER); validate(); repaint();
	 * 
	 * }
	 */
	public void AssociationOutput() {
		sp.startAssociator();
		tp.setSelectedIndex(1);
	}

	public void addClusterPanel(ClusterLabel la) {
		cp = la.getCp();

		try {
			System.out.println(la.getInputData().getFilePath() + "@@");
			associationCheck = 0;
			clusterCheck = 1;
			classifyCheck = 0;
			int x = 0, y = 0;
			if (la.getId() == -1)
				la.setId(ClusterLabelCount++);

			pd = new PropertyDialog();
			removeAll();
			// add(sp, BorderLayout.CENTER);
			// weka.gui.LogPanel lp = new weka.gui.LogPanel();
			// sp.setLog(lp);
			// add(lp, BorderLayout.SOUTH);

			cp.setRightPanel(this);
			cp.getClustererEditor().setRightPanel(this);
			cp.setInstances(la.getInputData().getInstances());

			if (((ClusterLabel) la).getAlgorithm() == "k-means")
				cp.getClustererEditor().setKmeans();
			else if (((ClusterLabel) la).getAlgorithm() == "Density Based Cluster")
				cp.getClustererEditor().setDensityBasedClusterer();
			else if (((ClusterLabel) la).getAlgorithm() == "Hierarchical Cluster")
				cp.getClustererEditor().setHierarchicalClusterer();
			else if (((ClusterLabel) la).getAlgorithm() == "EM")
				cp.getClustererEditor().setEM();

			JPanel jp = pd.initialize1(cp.getClustererEditor(), x, y);
			JPanel trainPanel = new JPanel();
			trainPanel.setLayout(new BorderLayout());
			trainPanel.add(cp.getTrainPanel(), BorderLayout.NORTH);

			tp = new RightTabbedPane(this, trainPanel, jp, cp, "train");

			validate();
			repaint();
		} catch (Exception ex) {
			ex.printStackTrace();
			System.err.println(ex.getMessage());
		}
	}

	public void ClusterOutput() {
		cp.startClusterer();
		tp.setSelectedIndex(2);
	}

	public void addClassifyPanel(ClassifyLabel la) {
		fp = la.getFp();
		try {
			associationCheck = 0;
			clusterCheck = 0;
			classifyCheck = 1;
			System.out.println(la.getInputData().getFilePath() + "@@@");

			removeAll();
			int x = 0, y = 0;
			if (la.getId() == -1)
				la.setId(ClassifyLabelCount++);
			// weka.gui.LogPanel lp = new weka.gui.LogPanel();
			// fp.setLog(lp);
			// fp.add(lp, BorderLayout.SOUTH);

			pd = new PropertyDialog();
			fp.setRightPanel(this);
			fp.getClassifierEditor().setRightPanel(this);
			fp.setInstances(la.getInputData().getInstances());

			if (((ClassifyLabel) la).getAlgorithm() == "Decision Tree")
				fp.getClassifierEditor().setDecisionTree();
			else if (((ClassifyLabel) la).getAlgorithm() == "Neural Network")
				fp.getClassifierEditor().setNeuralNetwork();
			else if (((ClassifyLabel) la).getAlgorithm() == "KNN")
				fp.getClassifierEditor().setKnn();
			else if (((ClassifyLabel) la).getAlgorithm() == "Naive Bayes")
				fp.getClassifierEditor().setNaiveBayes();

			JPanel jp = pd.initialize1(fp.getClassifierEditor(), x, y);
			JPanel trainPanel = new JPanel();
			trainPanel.setLayout(new BorderLayout());
			trainPanel.add(fp.getTrainPanel(), BorderLayout.NORTH);

			tp = new RightTabbedPane(this, trainPanel, jp, fp, "train");

			repaint();
			validate();

		} catch (Exception ex) {
			ex.printStackTrace();
			System.err.println(ex.getMessage());
		}

	}

	public void classifyOutput() {
		fp.startClassifier();
		tp.setSelectedIndex(2);
	}

	public void addPreprocessPanel(ParentLabel la) {
		try {
			filterCheck = 1;
			removeAll();

			// weka.gui.LogPanel lp = new weka.gui.LogPanel();
			// sp.setLog(lp);

			pd = new PropertyDialog();
			pp.setLabel(la);
			pp.setInstances(la.getInputData().getInstances());
			pp.setRightPanel(this);
			pp.getFilterEditor().setRightPanel(this);
			JPanel jp = pd.initialize1(pp.getFilterEditor(), 0, 0);

			// 필터 추가

			if (((FilterLabel) la).getAlgorithm() == "normalize")
				pp.getFilterEditor().setNormalize(); // 나중에 필터추가
			else if (((FilterLabel) la).getAlgorithm() == "add")
				pp.getFilterEditor().setAdd();
			else if (((FilterLabel) la).getAlgorithm() == "addExpression")
				pp.getFilterEditor().setAddExpression();
			else if (((FilterLabel) la).getAlgorithm() == "addID")
				pp.getFilterEditor().setAddID();

			else if (((FilterLabel) la).getAlgorithm() == "copy")
				pp.getFilterEditor().setCopy();
			else if (((FilterLabel) la).getAlgorithm() == "discretize")
				pp.getFilterEditor().setDiscretize();
			else if (((FilterLabel) la).getAlgorithm() == "interquartileRange")
				pp.getFilterEditor().setInterquartileRange();
			else if (((FilterLabel) la).getAlgorithm() == "mergeTwoValues")
				pp.getFilterEditor().setMergeTwoValues();

			else if (((FilterLabel) la).getAlgorithm() == "nominalToBinary")
				pp.getFilterEditor().setNominalToBinary();
			else if (((FilterLabel) la).getAlgorithm() == "nominalToString")
				pp.getFilterEditor().setNominalToString();
			else if (((FilterLabel) la).getAlgorithm() == "numericCleaner")
				pp.getFilterEditor().setNumericCleaner();
			else if (((FilterLabel) la).getAlgorithm() == "numericToBinary")
				pp.getFilterEditor().setNumericToBinary();

			else if (((FilterLabel) la).getAlgorithm() == "numericToNominal")
				pp.getFilterEditor().setNumericToNominal();
			else if (((FilterLabel) la).getAlgorithm() == "numericTransform")
				pp.getFilterEditor().setNumericTransform();
			else if (((FilterLabel) la).getAlgorithm() == "removeType")
				pp.getFilterEditor().setRemoveType();
			else if (((FilterLabel) la).getAlgorithm() == "replaceMissingValues")
				pp.getFilterEditor().setReplaceMissingValues();

			else if (((FilterLabel) la).getAlgorithm() == "standardize")
				pp.getFilterEditor().setStandardize();
			else if (((FilterLabel) la).getAlgorithm() == "stringToNominal")
				pp.getFilterEditor().setStringToNominal();
			else if (((FilterLabel) la).getAlgorithm() == "removePercentage")
				pp.getFilterEditor().setRemovePercentage();
			else if (((FilterLabel) la).getAlgorithm() == "resample")
				pp.getFilterEditor().setResample();

			// else if(((FilterLabel)la).getAlgorithm()=="필터명")
			// pp.getFilterEditor().set필터명();

			// 여기에 추가

			setLayout(new BorderLayout());
			add(jp, BorderLayout.CENTER);
			setVisible(true);
			repaint();
			validate();

		} catch (Exception ex) {
			ex.printStackTrace();
			System.err.println(ex.getMessage());
		}
	}

	public void filterApply() {
		pp.applyFilter((Filter) pp.getFilterEditor().getValue());

	}

	public void addAnalyzePanel(ParentLabel la) {
		if (la.getFromLabel().getType() == "association") {
			sp = ((AssociationLabel) la.getFromLabel()).getSp();
			newFrame(sp.getHistory());
		} else if (la.getFromLabel().getType() == "cluster") {
			cp = ((ClusterLabel) la.getFromLabel()).getCp();
			newFrame(cp.getHistory());
		}
		else if (la.getFromLabel().getType() == "classify") {
			fp = ((ClassifyLabel) la.getFromLabel()).getFp();
			newFrame(fp.getHistory());
		}

		validate();
		repaint();

	}

	public void newFrame(ResultHistoryPanel history) {
		Hashtable<String, StringBuffer> result = history.getResult();
		System.out.println(history.getList().getModel().getSize());
		JFrame jf = new JFrame("비교");
		for (int i = 0; i < history.getList().getModel().getSize(); i++) {
			StringBuffer buff = result.get(history.getNameAtIndex(i));
			if ((buff != null)) {
				JTextArea ta = new JTextArea();
				ta.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
				ta.setFont(new Font("Monospaced", Font.PLAIN, 12));
				ta.setEditable(false);
				ta.setText(buff.toString());
				jf.getContentPane().setLayout(new GridLayout(1, 4));
				jf.getContentPane().add(new JScrollPane(ta));
				jf.pack();
				jf.setLocation(200, 50);
				jf.setSize(1200, 800);
				jf.setVisible(true);

			}
		}

	}

}
