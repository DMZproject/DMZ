package DMZ.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.border.EtchedBorder;

public class CenterPanel extends JPanel {

   Point sp;
   CenterPanel thisPanel = this;
   RightPanel rightPanel;

   ParentLabel fromLabel = null;
   ParentLabel toLabel = null;
   
   
   JPopupMenu popUpMenu = new JPopupMenu();
   JMenuItem deleteMenu = new JMenuItem("삭 제");

	ArrayList<ParentLabel> fromList=new ArrayList<ParentLabel>();
	ArrayList<ParentLabel> toList=new ArrayList<ParentLabel>();
	int maxCount=0;
   public CenterPanel() {
      
   }

   public void setRightPanel(RightPanel rightPanel) {
      this.rightPanel = rightPanel;
   }

   public void addLabel(JLabel la) {
      Random random = new Random();

      la.setLocation(random.nextInt(300) + 100, random.nextInt(200) + 100);
      la.addMouseListener(new LabelClickListener());
      la.addMouseMotionListener(new LabelClickListener());
      la.addKeyListener(new LabelKeyListener());
      add(la);
      repaint();

   }

  

   class LabelKeyListener implements KeyListener {
      ParentLabel la;
   @Override
   public void keyPressed(KeyEvent e) {
      // TODO Auto-generated method stub
	   boolean checkfrom=false;
	   int indexList=0;
      la = (ParentLabel)e.getSource();

      
      for(int i=0;i<maxCount;i++){
    	  if(fromList.get(i)==la){
    		checkfrom=true;  
    	  }
      }
      if(checkfrom==false)
    	  for(int i=0;i<maxCount;i++){
    	  	if(toList.get(i)==la){
    		  	indexList=i;
    	  	}
      	}
      
      if(la.selected&&e.getKeyCode()==127&&checkfrom==false){
    	  if(maxCount!=0){
    		toList.remove(indexList);
    	  	fromList.remove(indexList);
    	  	maxCount--;
    	  }
    	  la.selected=false;
    	  fromLabel=null;
         remove(la);
         repaint();
      }
   
   }

   @Override
   public void keyReleased(KeyEvent e) {
      // TODO Auto-generated method stub
      
   }

   @Override
   public void keyTyped(KeyEvent e) {
      // TODO Auto-generated method stub
      
   }
      
   }
   class LabelClickListener implements MouseMotionListener, MouseListener{
      ParentLabel la;
      boolean checkfrom=false;
      int indexList=0;
      @Override
      public void mouseClicked(MouseEvent e) {

         la = (ParentLabel) e.getSource();

         if (e.getClickCount() == 2) { // 더블 클릭이면

            la.run();
         }
         else if(e.getButton()==3)  //우클릭 이면
         {   
        	
            popUpMenu.add(deleteMenu);
            popUpMenu.show(la, e.getX(), e.getY());
            deleteMenu.addActionListener(new ActionListener(){

               public void actionPerformed(ActionEvent arg0) {
            	   for(int i=0;i<maxCount;i++){
            	    	  if(fromList.get(i)==la){
            	    		checkfrom=true;  
            	    		indexList=i;
            	    	  }
            	      }
            	   if(checkfrom==false){
            		      for(int i=0;i<maxCount;i++){
            		    	  if(toList.get(i)==la){
            		    		  indexList=i;
            		    	  }
            		      }
            	   }
            	      if(checkfrom!=true){
            	    	  if(maxCount!=0){
            	    		  toList.remove(indexList);
            	    		  fromList.remove(indexList);
            	    		  maxCount--;
            	    	  }
            	    	  la.selected=false;
            	    	  fromLabel=null;
            	    	  remove(la);
            	    	  repaint();
            	      }
              
               }
               
            });
         }

         else // 더블 클릭이 아니고 그냥 클릭일때
         {
            
            if (!la.selected) { // 선택 안된 라벨이면
               System.out.println(la.getLabelType());
               la.setBorder(new EtchedBorder()); // 보더 넣어주고
               la.selected = true; // 선택된 상태
               la.requestFocus();

               if (fromLabel == null && fromLabel != la && la.getInputData().getInstances()!=null ){ // 시작 라벨이 비어있고 누른
                                                // 라벨이랑
                                                // fromLabel이 같이
                                                // 않으면
                  fromLabel = la;
               }else if (fromLabel != null && toLabel == null && la.getInputData()==null) 
               {
                  
                  toLabel = la;
                  
                  if((fromLabel.getLabelType()<toLabel.getLabelType())||(fromLabel.getLabelType()==2&&toLabel.getLabelType()==2)){
                     fromLabel.setBorder(null);
                     toLabel.setBorder(null);
                     fromLabel.selected = false;
                     toLabel.selected = false;
                     toList.add(toLabel);
                     fromList.add(fromLabel);
                     maxCount++;
                     repaint();
                     toLabel.setInputData(fromLabel.getInputData());

                     fromLabel=null;
                     toLabel=null;
                  }
                  else{
                     fromLabel=null;
                     toLabel=null;
                     fromLabel.setBorder(null);
                     toLabel.setBorder(null);
                     fromLabel.selected = false;
                     toLabel.selected = false;
                     
                  }
               
               }
               

            } else { // 선택 됬는데
               la.setBorder(null); // 보더 없애주고
               la.selected = false; // 선택 해제
               fromLabel=null;
            }
            
         }

      }

      public void mouseEntered(MouseEvent e) {
      }

      public void mouseExited(MouseEvent e) {
      }

      public void mousePressed(MouseEvent e) {
         sp = e.getPoint();
      }

      public void mouseReleased(MouseEvent e) {
      }

      public void mouseDragged(MouseEvent e) {
         Point ep = e.getPoint();
         la = (ParentLabel) (e.getSource());
         Point p = la.getLocation();

         if (la.selected == false) // 라벨이 선택 안되어여짔으면 이동
         {
            la.setLocation(ep.x + p.x - sp.x, ep.y + p.y - sp.y);

         }
         repaint();
      }

      public void mouseMoved(MouseEvent e) {

      }
 
   }

   public void paintComponent(Graphics g) {
      super.paintComponent(g);
      g.setColor(Color.WHITE);
      g.fillRect(10, 10, 740, 840);
      for(int i=0;i<maxCount;i++){
			if(fromList.get(i)!=null && toList.get(i)!=null){
			BasicStroke stroke = new BasicStroke(5.0f);
			((Graphics2D) g).setStroke(stroke);

			g.setColor(Color.BLACK);

			g.drawLine(fromList.get(i).getX() + 70, fromList.get(i).getY() + 45,toList.get(i).getX(), toList.get(i).getY() + 45);
			}

		}

   }
}