package DMZ.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.Random;

import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.border.EtchedBorder;

public class CenterPanel extends JPanel {

   Point sp;
   CenterPanel thisPanel = this;
   RightPanel rightPanel;

   ParentLabel fromLabel = null;
   ParentLabel toLabel = null;
   
   
   JPopupMenu popUpMenu = new JPopupMenu();
   JMenuItem deleteMenu = new JMenuItem("삭 제");
   public CenterPanel() {
      
   }

   public void setRightPanel(RightPanel rightPanel) {
      this.rightPanel = rightPanel;
   }

   public void addLabel(JLabel la) {
      Random random = new Random();

      la.setLocation(random.nextInt(300) + 100, random.nextInt(200) + 100);
      la.addMouseListener(new LabelClickListener());
      la.addMouseMotionListener(new LabelClickListener());
      la.addKeyListener(new LabelKeyListener());
      add(la);
      repaint();

   }

   /*
    * 05.02 라벨에 대한 이벤트를 처리할 때 각 라벨이 어떤 라벨인지 확인한뒤 각 라벨에 맞는 이벤트 함수 정의할 것 지금 라벨
    * 더블클릭 이벤트시에 parent라벨로 업캐스팅한 상태에서 InputData를 가져오는데 Parent라벨엔 InputData가 없음
    * 이것 어떻게 처리할지 생각해 봐야함.
    */

   class LabelKeyListener implements KeyListener {
      ParentLabel la;
   @Override
   public void keyPressed(KeyEvent e) {
      // TODO Auto-generated method stub
      la = (ParentLabel)e.getSource();
      
      if(la.selected&&e.getKeyCode()==127){
         remove(la);
            repaint();
      }
   }

   @Override
   public void keyReleased(KeyEvent e) {
      // TODO Auto-generated method stub
      
   }

   @Override
   public void keyTyped(KeyEvent e) {
      // TODO Auto-generated method stub
      
   }
      
   }
   class LabelClickListener implements MouseMotionListener, MouseListener{
      ParentLabel la;

      @Override
      public void mouseClicked(MouseEvent e) {

         la = (ParentLabel) e.getSource();

         if (e.getClickCount() == 2) { // 더블 클릭이면

            la.run();
         }
         else if(e.getButton()==3)  //우클릭 이면
         {   
            popUpMenu.add(deleteMenu);
            popUpMenu.show(la, e.getX(), e.getY());
            deleteMenu.addActionListener(new ActionListener(){

               public void actionPerformed(ActionEvent arg0) {
                  remove(la);
                  repaint();
               }
               
            });
         }

         else // 더블 클릭이 아니고 그냥 클릭일때
         {
            
            if (!la.selected) { // 선택 안된 라벨이면
               System.out.println(la.getLabelType());
               la.setBorder(new EtchedBorder()); // 보더 넣어주고
               la.selected = true; // 선택된 상태
               la.requestFocus();

               if (fromLabel == null && fromLabel != la) // 시작 라벨이 비어있고 누른
                                                // 라벨이랑
                                                // fromLabel이 같이
                                                // 않으면
                  fromLabel = la;
               else if (fromLabel != null && toLabel == null) // toLabel이 데이터 열기가 아니여야함
               {
                  
                  toLabel = la;
                  
                  if((fromLabel.getLabelType()<toLabel.getLabelType())||(fromLabel.getLabelType()==2&&toLabel.getLabelType()==2)){
                     fromLabel.setBorder(null);
                     toLabel.setBorder(null);
                     fromLabel.selected = false;
                     toLabel.selected = false;
                     repaint();
                     toLabel.setInputData(fromLabel.getInputData());
                  }
                  else{
                     fromLabel=null;
                     toLabel=null;
                  }
               }
               

            } else { // 선택 됬는데
               la.setBorder(null); // 보더 없애주고
               la.selected = false; // 선택 해제
               fromLabel=null;
            }

         }

      }

      public void mouseEntered(MouseEvent e) {
      }

      public void mouseExited(MouseEvent e) {
      }

      public void mousePressed(MouseEvent e) {
         sp = e.getPoint();
      }

      public void mouseReleased(MouseEvent e) {
      }

      public void mouseDragged(MouseEvent e) {
         Point ep = e.getPoint();
         la = (ParentLabel) (e.getSource());
         Point p = la.getLocation();

         if (la.selected == false) // 라벨이 선택 안되어여짔으면 이동
         {
            la.setLocation(ep.x + p.x - sp.x, ep.y + p.y - sp.y);

         }
         repaint();
      }

      public void mouseMoved(MouseEvent e) {

      }

   }

   public void paintComponent(Graphics g) {
      super.paintComponent(g);
      g.setColor(Color.WHITE);
      g.fillRect(10, 10, 740, 840);

      if (fromLabel != null && toLabel != null) {
         BasicStroke stroke = new BasicStroke(5.0f);
         ((Graphics2D) g).setStroke(stroke);

         g.setColor(Color.BLACK);

         g.drawLine(fromLabel.getX() + 70, fromLabel.getY() + 45,
               toLabel.getX(), toLabel.getY() + 45);

      }

   }
}