package DMZ.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.border.EtchedBorder;

public class CenterPanel extends JPanel {

	Point sp;
	CenterPanel thisPanel = this;
	RightPanel rightPanel;

	ParentLabel fromLabel = null;
	ParentLabel toLabel = null;
	ParentLabel tempLabel = null;
	
	
	JPopupMenu popUpMenu = new JPopupMenu();
	JMenuItem deleteMenu = new JMenuItem("삭 제");

	ArrayList<ParentLabel> fromList = new ArrayList<ParentLabel>();
	ArrayList<ParentLabel> toList = new ArrayList<ParentLabel>();
	ArrayList<ParentLabel> noneList = new ArrayList<ParentLabel>();
	int maxCount = 0;
	int noneCount = 0;
	
	public CenterPanel() {

	}

	public void setRightPanel(RightPanel rightPanel) {
		this.rightPanel = rightPanel;
	}

	public void addLabel(ParentLabel la) {
		Random random = new Random();

		la.setLocation(random.nextInt(300) + 100, random.nextInt(200) + 100);
		la.addMouseListener(new LabelClickListener());
		la.addMouseMotionListener(new LabelClickListener());
		la.addKeyListener(new LabelKeyListener());
		add(la);
		noneList.add(la);
		noneCount++;
		repaint();

	}

	class LabelKeyListener implements KeyListener {
		ParentLabel la;

		@Override
		public void keyPressed(KeyEvent e) {
			// TODO Auto-generated method stub
			boolean checkFrom = false;
			boolean checknone = false;
			int indexList = 0;
			la = (ParentLabel) e.getSource();

			for (int i = 0; i < maxCount; i++) {
				if (fromList.get(i) == la) {
					checkFrom = true;
				}
				if (toList.get(i) == la) {
					indexList = i;
				}
			}

			if (checkFrom == false)
				for (int i = 0; i < noneCount; i++) {
					if(noneList.get(i)==la){
						checknone =true;
						indexList = i;
					}
				}

			if (la.selected && e.getKeyCode() == 127 && checkFrom == false) {
				if (maxCount != 0 && checknone != true) {
					toList.remove(indexList);
					fromList.remove(indexList);
					maxCount--;
					remove(la);
				}
				else if((checknone == true||noneCount==0)){
					
					if(noneCount!=0){
						noneList.remove(indexList);
						noneCount--;
					}
					remove(la);
				}
				la.selected = false;
				la.setBorder(null);
				fromLabel = null;

				repaint();
			}


		}

		@Override
		public void keyReleased(KeyEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void keyTyped(KeyEvent e) {
			// TODO Auto-generated method stub

		}

	}

	class LabelClickListener implements MouseMotionListener, MouseListener {
		ParentLabel la;
		boolean checkFrom = false;
		boolean checknone = false;
		int indexList = 0;
		int removeIndex =0;
		@Override
		public void mouseClicked(MouseEvent e) {

			la = (ParentLabel) e.getSource();

			if (e.getClickCount() == 2) { // 더블 클릭이면
				if(la.getInputData()==null){
					
				}
					
				else
					la.run();
			} else if ( e.getButton() == 3) // 우클릭 이면
			{

				popUpMenu.add(deleteMenu);
				popUpMenu.show(la, e.getX(), e.getY());
				deleteMenu.addActionListener(new ActionListener() {

					public void actionPerformed(ActionEvent arg0) {
						for (int i = 0; i < maxCount; i++) {
							if (fromList.get(i) == la) {
								checkFrom = true;
							}
							if (toList.get(i) == la) {
								indexList = i;
							}
						}
						if (checkFrom == false) {
							for (int i = 0; i < noneCount; i++) {
								if(noneList.get(i)==la){
									checknone =true;
									indexList = i;
								}
							}
						}
						if (la.selected && checkFrom == false) {
							if (maxCount != 0&& checknone == false) {
								toList.remove(indexList);
								fromList.remove(indexList);
								
								maxCount--;
								remove(la);
							}
							else if(checknone == true||noneCount==0){
								
								if(noneCount!=0){
									noneCount--;
									noneList.remove(indexList);
								}
								remove(la);
							}
							la.selected = false;
							fromLabel = null;
							repaint();
						}
						checkFrom = false;
						checknone = false;
						indexList =0;

					}

				});

			}

			else // 더블 클릭이 아니고 그냥 클릭일때
			{		
				if (!la.selected) { // 선택 안된 라벨이면
					
					
					if(tempLabel == null){
						tempLabel=la;
					}
					else if(tempLabel!=null && fromLabel ==null){
						tempLabel.selected=false;
						tempLabel.setBorder(null);
						tempLabel = la;
					}

					la.setBorder(new EtchedBorder()); // 보더 넣어주고
					la.selected = true; // 선택된 상태
					
					la.requestFocus();

					try {
						if (fromLabel == null && fromLabel != la&& la.getInputData()!= null && !(la.getClass()==Class.forName("DMZ.gui.InputDataLabel") && la.getInputData().getInstances()==null)) 
						{
							fromLabel = la;
						} 
						else if (fromLabel != null && toLabel == null&& fromLabel.getInputData().getInstances() != null && la.getInputData()==null &&fromLabel != la)
						{

							toLabel = la;
							
							if ((fromLabel.getLabelType() < toLabel.getLabelType())|| (fromLabel.getLabelType() == 2 && toLabel.getLabelType() == 2)) {
								fromLabel.setBorder(null);
								toLabel.setBorder(null);
								
								fromLabel.selected = false;
								toLabel.selected = false;
								toList.add(toLabel);
								fromList.add(fromLabel);
								for(int i=0;i<noneCount;i++){
									if(noneList.get(i) == fromLabel){
										checkFrom = true;
										removeIndex =i;
									}
								}
								if(checkFrom){
									noneList.remove(removeIndex);
									noneCount--;
									removeIndex=0;
									checkFrom=false;
								}
								for(int i=0;i<noneCount;i++){
									if(noneList.get(i) == toLabel){
										removeIndex =i;
									}
								}
								noneList.remove(removeIndex);
								noneCount--;
								removeIndex=0;
								
								maxCount++;
								repaint();
								
								toLabel.setInputData(fromLabel.getInputData());

							} else {
								fromLabel.selected = false;
								toLabel.selected = false;
								fromLabel.setBorder(null);
								toLabel.setBorder(null);

							}
							fromLabel = null;
							toLabel = null;
							tempLabel=null;
								
						}
						else{
							if(fromLabel!=null){
								fromLabel.selected=false;
								fromLabel.setBorder(null);
								fromLabel = la;
								fromLabel.selected = true;			
								fromLabel.setBorder(new EtchedBorder());
							}

							toLabel = null;
							
						}
					} catch (ClassNotFoundException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
					
					

				} else { // 선택 됬는데
			/*		if (fromLabel != null && toLabel == null&& toLabel.getInputData().getInstances() == null  && fromLabel != la)
					{

						toLabel = la;
						
						if ((fromLabel.getLabelType() < toLabel.getLabelType())|| (fromLabel.getLabelType() == 2 && toLabel.getLabelType() == 2)) {
							fromLabel.setBorder(null);
							toLabel.setBorder(null);
							
							fromLabel.selected = false;
							toLabel.selected = false;
							
							toList.add(toLabel);
							fromList.add(fromLabel);
							
							maxCount++;
							repaint();
							
							toLabel.setInputData(fromLabel.getInputData());

						} else {
							fromLabel.selected = false;
							toLabel.selected = false;
							fromLabel.setBorder(null);
							toLabel.setBorder(null);

						}
						fromLabel = null;
						toLabel = null;
							
					}*/
				la.setBorder(null); // 보더 없애주고
				la.selected = false; // 선택 해제
				fromLabel = null;
					
				}

			}

		
		}

		public void mouseEntered(MouseEvent e) {
		}

		public void mouseExited(MouseEvent e) {
		}

		public void mousePressed(MouseEvent e) {
			sp = e.getPoint();
		}

		public void mouseReleased(MouseEvent e) {
		}

		public void mouseDragged(MouseEvent e) {
			Point ep = e.getPoint();
			la = (ParentLabel) (e.getSource());
			Point p = la.getLocation();

			if (!la.selected)
			{
			
				
				la.setLocation(ep.x + p.x - sp.x, ep.y + p.y - sp.y);
			}
			
		
				
			repaint();
		}

		public void mouseMoved(MouseEvent e) {

		}

	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.setColor(Color.WHITE);
		g.fillRect(10, 10, 740, 840);
		System.out.println(thisPanel.getComponentCount());
		for (int i = 0; i < maxCount; i++) {
			if (fromList.get(i) != null && toList.get(i) != null) {
				
				BasicStroke stroke = new BasicStroke(5.0f);
				((Graphics2D) g).setStroke(stroke);

				g.setColor(Color.BLACK);
				
				g.drawLine(fromList.get(i).getX() + 70,fromList.get(i).getY() + 45, toList.get(i).getX(),toList.get(i).getY() + 45);
			}

		}
		if(this.getComponentCount()==0){
			rightPanel.removeAll();
			rightPanel.repaint();
		}
		
	}
}