package DMZ.visualize;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import weka.core.Instances;
import weka.filters.unsupervised.attribute.Remove;
import weka.gui.AttributeSelectionPanel;
import weka.gui.AttributeSummaryPanel;
import weka.gui.AttributeVisualizationPanel;
import weka.gui.InstancesSummaryPanel;
import weka.gui.TaskLogger;
import weka.gui.explorer.PreprocessPanel;

public class Histogram {

	protected Instances instances;
	/** Displays summary stats on the selected attribute */
	protected AttributeSummaryPanel attSummaryPanel = new AttributeSummaryPanel();
	/** The visualization of the attribute values */
	protected AttributeVisualizationPanel attVisualizePanel = new AttributeVisualizationPanel();
	/** Panel to let the user toggle attributes */
	protected AttributeSelectionPanel attPanel = new AttributeSelectionPanel();
	/** Button for removing attributes */
	protected JButton removeBtn = new JButton("제거");
	/** Panel to let the user toggle attributes */
	protected AttributeSelectionPanel m_AttPanel = new AttributeSelectionPanel();

	JPanel histogramPanel = new JPanel();

	public Histogram() {

		JPanel attStuffHolderPanel = new JPanel();
		attStuffHolderPanel.setBorder(BorderFactory.createTitledBorder("속성"));
		attStuffHolderPanel.setLayout(new BorderLayout());
		attStuffHolderPanel.add(attPanel, BorderLayout.CENTER);

		JPanel p1 = new JPanel();
		p1.setBorder(BorderFactory.createEmptyBorder(10, 5, 10, 5));
		p1.setLayout(new BorderLayout());

		attStuffHolderPanel.add(p1, BorderLayout.SOUTH);
		attSummaryPanel.setBorder(BorderFactory.createTitledBorder("선택된 속성"));

		JPanel attInfo = new JPanel();

		attInfo.setLayout(new BorderLayout());
		attInfo.add(attStuffHolderPanel, BorderLayout.CENTER);

		JPanel attVis = new JPanel();
		attVis.setLayout(new GridLayout(2, 1));
		attVis.add(attSummaryPanel);

		JComboBox colorBox = attVisualizePanel.getColorBox();
		colorBox.setToolTipText("The chosen attribute will also be used as the "
				+ "class attribute when a filter is applied.");
		colorBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent ie) {
				if (ie.getStateChange() == ItemEvent.SELECTED) {
					// updateCapabilitiesFilter(m_FilterEditor.getCapabilitiesFilter());
				}
			}
		});
		final JButton visAllBut = new JButton("전체보기");
		visAllBut.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				if (instances != null) {
					try {
						final weka.gui.beans.AttributeSummarizer as = new weka.gui.beans.AttributeSummarizer();
						as.setColoringIndex(attVisualizePanel.getColoringIndex());
						as.setInstances(instances);
						
						final javax.swing.JFrame jf = new javax.swing.JFrame();
						jf.getContentPane().setLayout(new java.awt.BorderLayout());

						jf.getContentPane().add(as,java.awt.BorderLayout.CENTER);
						jf.addWindowListener(new java.awt.event.WindowAdapter() {
							@Override
							public void windowClosing(java.awt.event.WindowEvent e) {
								visAllBut.setEnabled(true);
								jf.dispose();
							}
						});
						jf.setSize(830, 600);
						jf.setVisible(true);
					} catch (Exception ex) {
						ex.printStackTrace();
					}
				}
				else
					System.out.println("ddddddddddd");
			}
		});
		attPanel.getSelectionModel().addListSelectionListener(
				new ListSelectionListener() {
					public void valueChanged(ListSelectionEvent e) {
						if (!e.getValueIsAdjusting()) {
							ListSelectionModel lm = (ListSelectionModel) e
									.getSource();
							for (int i = e.getFirstIndex(); i <= e
									.getLastIndex(); i++) {
								if (lm.isSelectedIndex(i)) {
									attSummaryPanel.setAttribute(i);
									attVisualizePanel.setAttribute(i);
									break;
								}
							}
						}
					}
				});

		JPanel histoHolder = new JPanel();
		histoHolder.setLayout(new BorderLayout());
		histoHolder.add(attVisualizePanel, BorderLayout.CENTER);

		JPanel histoControls = new JPanel();
		histoControls.setLayout(new BorderLayout());
		histoControls.add(colorBox, BorderLayout.CENTER);
		histoControls.add(visAllBut, BorderLayout.EAST);
		histoHolder.add(histoControls, BorderLayout.NORTH);
		attVis.add(histoHolder);

		JPanel lhs = new JPanel();
		lhs.setLayout(new BorderLayout());
		lhs.add(attInfo, BorderLayout.CENTER);

		JPanel rhs = new JPanel();
		rhs.setLayout(new BorderLayout());
		rhs.add(attVis, BorderLayout.CENTER);

		histogramPanel.setLayout(new GridLayout(2, 1));
		histogramPanel.add(lhs);
		histogramPanel.add(rhs);

	}

	public JPanel getHistogramPanel() {
		return histogramPanel;
	}

	public void setInstances(Instances instances) {
		this.instances = instances;

	}

	public AttributeSummaryPanel getAttSummaryPanel() {
		return attSummaryPanel;
	}

	public AttributeVisualizationPanel getAttVisualizePanel() {
		return attVisualizePanel;
	}

	public AttributeSelectionPanel getAttPanel() {
		return attPanel;
	}

	public JButton getRemoveBtn() {
		return removeBtn;
	}

}
